// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO task_manager_users (
   email, username, first_name, last_name, is_superuser
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, password, last_login, is_superuser, username, first_name, last_name, email, created_at
`

type CreateUserParams struct {
	Email       string
	Username    string
	FirstName   string
	LastName    string
	IsSuperuser bool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (TaskManagerUser, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.Username,
		arg.FirstName,
		arg.LastName,
		arg.IsSuperuser,
	)
	var i TaskManagerUser
	err := row.Scan(
		&i.ID,
		&i.Password,
		&i.LastLogin,
		&i.IsSuperuser,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM task_manager_users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, password, last_login, is_superuser, username, first_name, last_name, email, created_at FROM task_manager_users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (TaskManagerUser, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i TaskManagerUser
	err := row.Scan(
		&i.ID,
		&i.Password,
		&i.LastLogin,
		&i.IsSuperuser,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const listUser = `-- name: ListUser :many
SELECT id, password, last_login, is_superuser, username, first_name, last_name, email, created_at FROM task_manager_users
ORDER BY email
`

func (q *Queries) ListUser(ctx context.Context) ([]TaskManagerUser, error) {
	rows, err := q.db.Query(ctx, listUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TaskManagerUser
	for rows.Next() {
		var i TaskManagerUser
		if err := rows.Scan(
			&i.ID,
			&i.Password,
			&i.LastLogin,
			&i.IsSuperuser,
			&i.Username,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE task_manager_users
  set username = $2,
  email = $3,
  first_name = $4, 
  last_name = $5, 
  is_superuser = $6
WHERE id = $1
RETURNING id, password, last_login, is_superuser, username, first_name, last_name, email, created_at
`

type UpdateUserParams struct {
	ID          int64
	Username    string
	Email       string
	FirstName   string
	LastName    string
	IsSuperuser bool
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.IsSuperuser,
	)
	return err
}
