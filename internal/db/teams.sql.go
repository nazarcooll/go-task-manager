// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: teams.sql

package db

import (
	"context"
)

const createTeam = `-- name: CreateTeam :one
INSERT INTO teams (
   name
) VALUES (
  $1
)
RETURNING id, name, created_at
`

func (q *Queries) CreateTeam(ctx context.Context, name string) (Team, error) {
	row := q.db.QueryRow(ctx, createTeam, name)
	var i Team
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const deleteTeam = `-- name: DeleteTeam :exec
DELETE FROM teams
WHERE id = $1
`

func (q *Queries) DeleteTeam(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTeam, id)
	return err
}

const getTeam = `-- name: GetTeam :one
SELECT id, name, created_at FROM teams
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTeam(ctx context.Context, id int64) (Team, error) {
	row := q.db.QueryRow(ctx, getTeam, id)
	var i Team
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const listTeam = `-- name: ListTeam :many
SELECT id, name, created_at FROM teams
ORDER BY name
`

func (q *Queries) ListTeam(ctx context.Context) ([]Team, error) {
	rows, err := q.db.Query(ctx, listTeam)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Team
	for rows.Next() {
		var i Team
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTeam = `-- name: UpdateTeam :exec
UPDATE teams
  set name = $2
WHERE id = $1
RETURNING id, name, created_at
`

type UpdateTeamParams struct {
	ID   int64
	Name string
}

func (q *Queries) UpdateTeam(ctx context.Context, arg UpdateTeamParams) error {
	_, err := q.db.Exec(ctx, updateTeam, arg.ID, arg.Name)
	return err
}
